
GccApplication11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00000874  00000908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080014a  0080014a  000009f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001391  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ed  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f9  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b6  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c01  00000000  00000000  00002c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 34       	cpi	r26, 0x4A	; 74
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e4       	ldi	r26, 0x4A	; 74
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 34       	cpi	r26, 0x4E	; 78
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 01 	call	0x326	; 0x326 <main>
  8a:	0c 94 38 04 	jmp	0x870	; 0x870 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_data_write>:
void lcd_string_write( char *string);
void lcd_number_write(int number,unsigned char radix);

void lcd_data_write(char data)
{
LCD_CONT_PORT=_BV(LCD_EN)|_BV(LCD_RS);
  92:	95 e0       	ldi	r25, 0x05	; 5
  94:	92 bb       	out	0x12, r25	; 18
LCD_DATA_PORT=data;
  96:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	89 ef       	ldi	r24, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_data_write+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_data_write+0x10>
  a2:	00 00       	nop
_delay_ms(1);
LCD_CONT_PORT=_BV(LCD_RS);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_data_write+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_data_write+0x20>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <lcd_command_write>:
}


void lcd_command_write(char command)
{
LCD_CONT_PORT=_BV(LCD_EN);
  b6:	94 e0       	ldi	r25, 0x04	; 4
  b8:	92 bb       	out	0x12, r25	; 18
LCD_DATA_PORT=command;
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	89 ef       	ldi	r24, 0xF9	; 249
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_command_write+0xa>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_command_write+0x10>
  c6:	00 00       	nop
_delay_ms(1);
LCD_CONT_PORT=0x00;
  c8:	12 ba       	out	0x12, r1	; 18
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_command_write+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_command_write+0x1e>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <lcd_init>:
_delay_ms(1);
}

void lcd_init()
{
	lcd_command_write(0x38);
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
	lcd_command_write(0x01);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
	lcd_command_write(0x06);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
	lcd_command_write(0x0e);	
  ea:	8e e0       	ldi	r24, 0x0E	; 14
  ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
  f0:	08 95       	ret

000000f2 <lcd_string_write>:
}

void lcd_string_write(char *string)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
while (*string)
  f8:	88 81       	ld	r24, Y
  fa:	88 23       	and	r24, r24
  fc:	31 f0       	breq	.+12     	; 0x10a <lcd_string_write+0x18>
  fe:	21 96       	adiw	r28, 0x01	; 1
lcd_data_write(*string++);
 100:	0e 94 49 00 	call	0x92	; 0x92 <lcd_data_write>
	lcd_command_write(0x0e);	
}

void lcd_string_write(char *string)
{
while (*string)
 104:	89 91       	ld	r24, Y+
 106:	81 11       	cpse	r24, r1
 108:	fb cf       	rjmp	.-10     	; 0x100 <lcd_string_write+0xe>
lcd_data_write(*string++);
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_number_write>:

void lcd_number_write(int number,unsigned char radix)
{
char *number_string="00000";
itoa(number,number_string,radix);
 110:	46 2f       	mov	r20, r22
 112:	50 e0       	ldi	r21, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 114:	60 e6       	ldi	r22, 0x60	; 96
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <itoa>
lcd_string_write(number_string);
 11c:	80 e6       	ldi	r24, 0x60	; 96
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 124:	08 95       	ret

00000126 <keypad_init>:
struct keypad_return keypad;


void keypad_init()
{
	DEFINE_PIN_TYPE|=((1<<ROW_1)|(1<<ROW_2)|(1<<ROW_3)|(1<<ROW_4));   //define output pin
 126:	84 b3       	in	r24, 0x14	; 20
 128:	8f 60       	ori	r24, 0x0F	; 15
 12a:	84 bb       	out	0x14, r24	; 20
	DEFINE_PIN_TYPE &= ~((1<<COLUMN_1)|(1<<COLUMN_2)|(1<<COLUMN_3));  //define input pin
 12c:	84 b3       	in	r24, 0x14	; 20
 12e:	8f 78       	andi	r24, 0x8F	; 143
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret

00000134 <keypad_read>:
}

int keypad_read()
{
	
	keypad_init();
 134:	0e 94 93 00 	call	0x126	; 0x126 <keypad_init>
	
	PORTC |= (1<<PORTC0);
 138:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	00 c0       	rjmp	.+0      	; 0x13c <keypad_read+0x8>
	_delay_us(2);
	if(PINC & (1<<COLUMN_1))
 13c:	9c 9b       	sbis	0x13, 4	; 19
 13e:	12 c0       	rjmp	.+36     	; 0x164 <keypad_read+0x30>
	{
		keypad.keypad_value=1;
 140:	ea e4       	ldi	r30, 0x4A	; 74
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	91 83       	std	Z+1, r25	; 0x01
 14a:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 14c:	82 81       	ldd	r24, Z+2	; 0x02
 14e:	93 81       	ldd	r25, Z+3	; 0x03
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	93 83       	std	Z+3, r25	; 0x03
 154:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	83 e2       	ldi	r24, 0x23	; 35
 158:	94 ef       	ldi	r25, 0xF4	; 244
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <keypad_read+0x26>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <keypad_read+0x2c>
 160:	00 00       	nop
 162:	27 c0       	rjmp	.+78     	; 0x1b2 <keypad_read+0x7e>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_2))
 164:	9d 9b       	sbis	0x13, 5	; 19
 166:	12 c0       	rjmp	.+36     	; 0x18c <keypad_read+0x58>
	{
		keypad.keypad_value=2;
 168:	ea e4       	ldi	r30, 0x4A	; 74
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 174:	82 81       	ldd	r24, Z+2	; 0x02
 176:	93 81       	ldd	r25, Z+3	; 0x03
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	93 83       	std	Z+3, r25	; 0x03
 17c:	82 83       	std	Z+2, r24	; 0x02
 17e:	83 e2       	ldi	r24, 0x23	; 35
 180:	94 ef       	ldi	r25, 0xF4	; 244
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <keypad_read+0x4e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <keypad_read+0x54>
 188:	00 00       	nop
 18a:	13 c0       	rjmp	.+38     	; 0x1b2 <keypad_read+0x7e>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_3))
 18c:	9e 9b       	sbis	0x13, 6	; 19
 18e:	11 c0       	rjmp	.+34     	; 0x1b2 <keypad_read+0x7e>
	{
		keypad.keypad_value=3;
 190:	ea e4       	ldi	r30, 0x4A	; 74
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	91 83       	std	Z+1, r25	; 0x01
 19a:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 19c:	82 81       	ldd	r24, Z+2	; 0x02
 19e:	93 81       	ldd	r25, Z+3	; 0x03
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	93 83       	std	Z+3, r25	; 0x03
 1a4:	82 83       	std	Z+2, r24	; 0x02
 1a6:	83 e2       	ldi	r24, 0x23	; 35
 1a8:	94 ef       	ldi	r25, 0xF4	; 244
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <keypad_read+0x76>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <keypad_read+0x7c>
 1b0:	00 00       	nop
		_delay_ms(250);
	}
	
	else
	;
	PORTC &= ~(1<<PORTC0);
 1b2:	a8 98       	cbi	0x15, 0	; 21
	
	
	
	
	PORTC |= (1<<PORTC1);
 1b4:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <keypad_read+0x84>
	_delay_us(2);
	if(PINC & (1<<COLUMN_1))
 1b8:	9c 9b       	sbis	0x13, 4	; 19
 1ba:	12 c0       	rjmp	.+36     	; 0x1e0 <keypad_read+0xac>
	{
		keypad.keypad_value=4;
 1bc:	ea e4       	ldi	r30, 0x4A	; 74
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	91 83       	std	Z+1, r25	; 0x01
 1c6:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	93 81       	ldd	r25, Z+3	; 0x03
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	93 83       	std	Z+3, r25	; 0x03
 1d0:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	83 e2       	ldi	r24, 0x23	; 35
 1d4:	94 ef       	ldi	r25, 0xF4	; 244
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <keypad_read+0xa2>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <keypad_read+0xa8>
 1dc:	00 00       	nop
 1de:	27 c0       	rjmp	.+78     	; 0x22e <keypad_read+0xfa>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_2))
 1e0:	9d 9b       	sbis	0x13, 5	; 19
 1e2:	12 c0       	rjmp	.+36     	; 0x208 <keypad_read+0xd4>
	{
		keypad.keypad_value=5;
 1e4:	ea e4       	ldi	r30, 0x4A	; 74
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 1f0:	82 81       	ldd	r24, Z+2	; 0x02
 1f2:	93 81       	ldd	r25, Z+3	; 0x03
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	93 83       	std	Z+3, r25	; 0x03
 1f8:	82 83       	std	Z+2, r24	; 0x02
 1fa:	83 e2       	ldi	r24, 0x23	; 35
 1fc:	94 ef       	ldi	r25, 0xF4	; 244
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <keypad_read+0xca>
 202:	00 c0       	rjmp	.+0      	; 0x204 <keypad_read+0xd0>
 204:	00 00       	nop
 206:	13 c0       	rjmp	.+38     	; 0x22e <keypad_read+0xfa>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_3))
 208:	9e 9b       	sbis	0x13, 6	; 19
 20a:	11 c0       	rjmp	.+34     	; 0x22e <keypad_read+0xfa>
	{
		keypad.keypad_value=6;
 20c:	ea e4       	ldi	r30, 0x4A	; 74
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 218:	82 81       	ldd	r24, Z+2	; 0x02
 21a:	93 81       	ldd	r25, Z+3	; 0x03
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	93 83       	std	Z+3, r25	; 0x03
 220:	82 83       	std	Z+2, r24	; 0x02
 222:	83 e2       	ldi	r24, 0x23	; 35
 224:	94 ef       	ldi	r25, 0xF4	; 244
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <keypad_read+0xf2>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <keypad_read+0xf8>
 22c:	00 00       	nop
		_delay_ms(250);
	}
	else
	;
	PORTC &= ~(1<<PORTC1);
 22e:	a9 98       	cbi	0x15, 1	; 21
	
	
	
	
	PORTC |= (1<<PORTC2);
 230:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	00 c0       	rjmp	.+0      	; 0x234 <keypad_read+0x100>
	_delay_us(2);
	if(PINC & (1<<COLUMN_1))
 234:	9c 9b       	sbis	0x13, 4	; 19
 236:	12 c0       	rjmp	.+36     	; 0x25c <keypad_read+0x128>
	{
		keypad.keypad_value=7;
 238:	ea e4       	ldi	r30, 0x4A	; 74
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	91 83       	std	Z+1, r25	; 0x01
 242:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 244:	82 81       	ldd	r24, Z+2	; 0x02
 246:	93 81       	ldd	r25, Z+3	; 0x03
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	93 83       	std	Z+3, r25	; 0x03
 24c:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	83 e2       	ldi	r24, 0x23	; 35
 250:	94 ef       	ldi	r25, 0xF4	; 244
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <keypad_read+0x11e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <keypad_read+0x124>
 258:	00 00       	nop
 25a:	27 c0       	rjmp	.+78     	; 0x2aa <keypad_read+0x176>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_2))
 25c:	9d 9b       	sbis	0x13, 5	; 19
 25e:	12 c0       	rjmp	.+36     	; 0x284 <keypad_read+0x150>
	{
		keypad.keypad_value=8;
 260:	ea e4       	ldi	r30, 0x4A	; 74
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	91 83       	std	Z+1, r25	; 0x01
 26a:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	93 81       	ldd	r25, Z+3	; 0x03
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	93 83       	std	Z+3, r25	; 0x03
 274:	82 83       	std	Z+2, r24	; 0x02
 276:	83 e2       	ldi	r24, 0x23	; 35
 278:	94 ef       	ldi	r25, 0xF4	; 244
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <keypad_read+0x146>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <keypad_read+0x14c>
 280:	00 00       	nop
 282:	13 c0       	rjmp	.+38     	; 0x2aa <keypad_read+0x176>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_3))
 284:	9e 9b       	sbis	0x13, 6	; 19
 286:	11 c0       	rjmp	.+34     	; 0x2aa <keypad_read+0x176>
	{
		keypad.keypad_value=9;
 288:	ea e4       	ldi	r30, 0x4A	; 74
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	89 e0       	ldi	r24, 0x09	; 9
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	91 83       	std	Z+1, r25	; 0x01
 292:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 294:	82 81       	ldd	r24, Z+2	; 0x02
 296:	93 81       	ldd	r25, Z+3	; 0x03
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	93 83       	std	Z+3, r25	; 0x03
 29c:	82 83       	std	Z+2, r24	; 0x02
 29e:	83 e2       	ldi	r24, 0x23	; 35
 2a0:	94 ef       	ldi	r25, 0xF4	; 244
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <keypad_read+0x16e>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <keypad_read+0x174>
 2a8:	00 00       	nop
		_delay_ms(250);
	}
	else
	;
	PORTC &= ~(1<<PORTC2);
 2aa:	aa 98       	cbi	0x15, 2	; 21
	
	
	
	PORTC |= (1<<PORTC3);
 2ac:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <keypad_read+0x17c>
	_delay_us(2);
	if(PINC & (1<<COLUMN_1))
 2b0:	9c 9b       	sbis	0x13, 4	; 19
 2b2:	12 c0       	rjmp	.+36     	; 0x2d8 <keypad_read+0x1a4>
	{
		keypad.keypad_value=10;
 2b4:	ea e4       	ldi	r30, 0x4A	; 74
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 2c0:	82 81       	ldd	r24, Z+2	; 0x02
 2c2:	93 81       	ldd	r25, Z+3	; 0x03
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	93 83       	std	Z+3, r25	; 0x03
 2c8:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	83 e2       	ldi	r24, 0x23	; 35
 2cc:	94 ef       	ldi	r25, 0xF4	; 244
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <keypad_read+0x19a>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <keypad_read+0x1a0>
 2d4:	00 00       	nop
 2d6:	25 c0       	rjmp	.+74     	; 0x322 <keypad_read+0x1ee>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_2))
 2d8:	9d 9b       	sbis	0x13, 5	; 19
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <keypad_read+0x1c8>
	{
		keypad.keypad_value=0;
 2dc:	ea e4       	ldi	r30, 0x4A	; 74
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	11 82       	std	Z+1, r1	; 0x01
 2e2:	10 82       	st	Z, r1
		keypad.keypad_counter++;
 2e4:	82 81       	ldd	r24, Z+2	; 0x02
 2e6:	93 81       	ldd	r25, Z+3	; 0x03
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	93 83       	std	Z+3, r25	; 0x03
 2ec:	82 83       	std	Z+2, r24	; 0x02
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	94 ef       	ldi	r25, 0xF4	; 244
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <keypad_read+0x1be>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <keypad_read+0x1c4>
 2f8:	00 00       	nop
 2fa:	13 c0       	rjmp	.+38     	; 0x322 <keypad_read+0x1ee>
		_delay_ms(250);
	}
	else if(PINC & (1<<COLUMN_3))
 2fc:	9e 9b       	sbis	0x13, 6	; 19
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <keypad_read+0x1ee>
	{
		keypad.keypad_value=11;
 300:	ea e4       	ldi	r30, 0x4A	; 74
 302:	f1 e0       	ldi	r31, 0x01	; 1
 304:	8b e0       	ldi	r24, 0x0B	; 11
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	91 83       	std	Z+1, r25	; 0x01
 30a:	80 83       	st	Z, r24
		keypad.keypad_counter++;
 30c:	82 81       	ldd	r24, Z+2	; 0x02
 30e:	93 81       	ldd	r25, Z+3	; 0x03
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	93 83       	std	Z+3, r25	; 0x03
 314:	82 83       	std	Z+2, r24	; 0x02
 316:	83 e2       	ldi	r24, 0x23	; 35
 318:	94 ef       	ldi	r25, 0xF4	; 244
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <keypad_read+0x1e6>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <keypad_read+0x1ec>
 320:	00 00       	nop
		_delay_ms(250);
	}
	else
	;
	PORTC &= ~(1<<PORTC3);
 322:	ab 98       	cbi	0x15, 3	; 21
	
	return;
 324:	08 95       	ret

00000326 <main>:
#include "keypad.h"


int main(void)
{
	MCUCSR=(1<<JTD);
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	84 bf       	out	0x34, r24	; 52
	MCUCSR=(1<<JTD);
 32a:	84 bf       	out	0x34, r24	; 52
	
	keypad.keypad_counter=0;
 32c:	ea e4       	ldi	r30, 0x4A	; 74
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	13 82       	std	Z+3, r1	; 0x03
 332:	12 82       	std	Z+2, r1	; 0x02
	keypad.keypad_value=0;
 334:	11 82       	std	Z+1, r1	; 0x01
 336:	10 82       	st	Z, r1
	//DDRC=0x0f;
	//PORTC=0xff;
	DDRB=0x0f;
 338:	8f e0       	ldi	r24, 0x0F	; 15
 33a:	87 bb       	out	0x17, r24	; 23
	DDRA=0xff;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xff;
 340:	81 bb       	out	0x11, r24	; 17
	unsigned char keypad_value,count=0;
	char password_entered[5];
	char password_set = "1";
	char status=0;

	lcd_init();
 342:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_init>
	keypad_init();
 346:	0e 94 93 00 	call	0x126	; 0x126 <keypad_init>
	lcd_string_write("Coin Counter");
 34a:	86 e6       	ldi	r24, 0x66	; 102
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
	lcd_command_write(0xc1);
 352:	81 ec       	ldi	r24, 0xC1	; 193
 354:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
	lcd_string_write("Group-2");
 358:	83 e7       	ldi	r24, 0x73	; 115
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 360:	2f e9       	ldi	r18, 0x9F	; 159
 362:	36 e8       	ldi	r19, 0x86	; 134
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	21 50       	subi	r18, 0x01	; 1
 368:	30 40       	sbci	r19, 0x00	; 0
 36a:	40 40       	sbci	r20, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <main+0x40>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x4a>
 370:	00 00       	nop
 372:	8f e9       	ldi	r24, 0x9F	; 159
 374:	96 e8       	ldi	r25, 0x86	; 134
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x52>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x5c>
 382:	00 00       	nop
 384:	3f e9       	ldi	r19, 0x9F	; 159
 386:	46 e8       	ldi	r20, 0x86	; 134
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	31 50       	subi	r19, 0x01	; 1
 38c:	40 40       	sbci	r20, 0x00	; 0
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0x64>
 392:	00 c0       	rjmp	.+0      	; 0x394 <main+0x6e>
 394:	00 00       	nop
 396:	9f e9       	ldi	r25, 0x9F	; 159
 398:	26 e8       	ldi	r18, 0x86	; 134
 39a:	31 e0       	ldi	r19, 0x01	; 1
 39c:	91 50       	subi	r25, 0x01	; 1
 39e:	20 40       	sbci	r18, 0x00	; 0
 3a0:	30 40       	sbci	r19, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x76>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x80>
 3a6:	00 00       	nop
	_delay_ms(500);
	_delay_ms(500);
	_delay_ms(500);
	_delay_ms(500);

	lcd_command_write(0x01);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>

	lcd_string_write("Enter key to start:");
 3ae:	8b e7       	ldi	r24, 0x7B	; 123
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
	

		while(count<1)
		{
			keypad.keypad_counter=0;
 3b6:	ca e4       	ldi	r28, 0x4A	; 74
 3b8:	d1 e0       	ldi	r29, 0x01	; 1
 3ba:	1b 82       	std	Y+3, r1	; 0x03
 3bc:	1a 82       	std	Y+2, r1	; 0x02
			keypad_read();
 3be:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_read>
			if(keypad.keypad_counter > 0)
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	9b 81       	ldd	r25, Y+3	; 0x03
 3c6:	18 16       	cp	r1, r24
 3c8:	19 06       	cpc	r1, r25
 3ca:	bc f7       	brge	.-18     	; 0x3ba <main+0x94>
			{	
				lcd_command_write(0xc1);
 3cc:	81 ec       	ldi	r24, 0xC1	; 193
 3ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
				lcd_string_write("*");
 3d2:	8f e8       	ldi	r24, 0x8F	; 143
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 3da:	4f e9       	ldi	r20, 0x9F	; 159
 3dc:	86 e8       	ldi	r24, 0x86	; 134
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	41 50       	subi	r20, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0xba>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0xc4>
 3ea:	00 00       	nop
				_delay_ms(500);				
				lcd_command_write(0xc1);
 3ec:	81 ec       	ldi	r24, 0xC1	; 193
 3ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
				if(keypad.keypad_value == 1)
 3f2:	88 81       	ld	r24, Y
 3f4:	99 81       	ldd	r25, Y+1	; 0x01
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	71 f5       	brne	.+92     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
				{
					lcd_command_write(0x01);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
					lcd_string_write("Key Correct");
 400:	81 e9       	ldi	r24, 0x91	; 145
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 408:	2f e9       	ldi	r18, 0x9F	; 159
 40a:	36 e8       	ldi	r19, 0x86	; 134
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	30 40       	sbci	r19, 0x00	; 0
 412:	40 40       	sbci	r20, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	8f e9       	ldi	r24, 0x9F	; 159
 41c:	96 e8       	ldi	r25, 0x86	; 134
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	81 50       	subi	r24, 0x01	; 1
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	20 40       	sbci	r18, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
			//break;		
		}
		
while(status == 0)
	{					
		lcd_command_write(0x01);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
		lcd_string_write("Press 2,4,6,8,5");
 432:	8d e9       	ldi	r24, 0x9D	; 157
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
	{
		
		lcd_command_write(0xC0);
		
		keypad_read();
		if(keypad.keypad_counter > 0)
 43a:	ca e4       	ldi	r28, 0x4A	; 74
 43c:	d1 e0       	ldi	r29, 0x01	; 1
							PORTB=0x08;
							_delay_ms(500);
							PORTB=0x00;
							_delay_ms(500);
						}
						lcd_command_write(0x01);
 43e:	11 e0       	ldi	r17, 0x01	; 1
					if(keypad.keypad_counter > 0)
					{
						lcd_number_write(keypad.keypad_value,10);
						for(int i=0; i<keypad.keypad_value; i++)
						{
							PORTB=0x08;
 440:	68 94       	set
 442:	ee 24       	eor	r14, r14
 444:	e3 f8       	bld	r14, 3
					if(keypad.keypad_counter > 0)
					{
						lcd_number_write(keypad.keypad_value,10);
						for(int i=0; i<keypad.keypad_value; i++)
						{
							PORTB=0x04;
 446:	68 94       	set
 448:	ff 24       	eor	r15, r15
 44a:	f2 f8       	bld	r15, 2
					if(keypad.keypad_counter > 0)
					{
						lcd_number_write(keypad.keypad_value,10);
						for(int i=0; i<keypad.keypad_value; i++)
						{
							PORTB=0x02;
 44c:	02 e0       	ldi	r16, 0x02	; 2
				if(keypad.keypad_counter > 0)
				{
					lcd_number_write(keypad.keypad_value,10);
					for(int i=0; i<keypad.keypad_value; i++)
					{
						PORTB=0x01;
 44e:	d1 2e       	mov	r13, r17
				while(1){
					keypad_read();
					if(keypad.keypad_counter > 0)
					{
						lcd_number_write(keypad.keypad_value,10);
						for(int i=0; i<keypad.keypad_value; i++)
 450:	b1 2c       	mov	r11, r1
 452:	c1 2c       	mov	r12, r1
 454:	33 c0       	rjmp	.+102    	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
					_delay_ms(500);
					_delay_ms(500);
				}	
				else
				{
					lcd_command_write(0x01);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
					lcd_string_write("Wrong key");
 45c:	8d ea       	ldi	r24, 0xAD	; 173
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 464:	3f e9       	ldi	r19, 0x9F	; 159
 466:	46 e8       	ldi	r20, 0x86	; 134
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	31 50       	subi	r19, 0x01	; 1
 46c:	40 40       	sbci	r20, 0x00	; 0
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	9f e9       	ldi	r25, 0x9F	; 159
 478:	26 e8       	ldi	r18, 0x86	; 134
 47a:	31 e0       	ldi	r19, 0x01	; 1
 47c:	91 50       	subi	r25, 0x01	; 1
 47e:	20 40       	sbci	r18, 0x00	; 0
 480:	30 40       	sbci	r19, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
 486:	00 00       	nop
 488:	4f e9       	ldi	r20, 0x9F	; 159
 48a:	86 e8       	ldi	r24, 0x86	; 134
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	41 50       	subi	r20, 0x01	; 1
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
 498:	00 00       	nop
 49a:	2f e9       	ldi	r18, 0x9F	; 159
 49c:	36 e8       	ldi	r19, 0x86	; 134
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	21 50       	subi	r18, 0x01	; 1
 4a2:	30 40       	sbci	r19, 0x00	; 0
 4a4:	40 40       	sbci	r20, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
 4aa:	00 00       	nop
					_delay_ms(500);
					_delay_ms(500);
					_delay_ms(500);
					_delay_ms(500);
					lcd_command_write(0x01);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
					lcd_string_write("Reenter Key:");
 4b2:	87 eb       	ldi	r24, 0xB7	; 183
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 4ba:	7f cf       	rjmp	.-258    	; 0x3ba <main+0x94>
		lcd_string_write("Press 2,4,6,8,5");
	
	while(1)
	{
		
		lcd_command_write(0xC0);
 4bc:	80 ec       	ldi	r24, 0xC0	; 192
 4be:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
		
		keypad_read();
 4c2:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_read>
		if(keypad.keypad_counter > 0)
 4c6:	2a 81       	ldd	r18, Y+2	; 0x02
 4c8:	3b 81       	ldd	r19, Y+3	; 0x03
 4ca:	12 16       	cp	r1, r18
 4cc:	13 06       	cpc	r1, r19
 4ce:	b4 f7       	brge	.-20     	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
		{
			keypad.keypad_counter = 0;
 4d0:	1b 82       	std	Y+3, r1	; 0x03
 4d2:	1a 82       	std	Y+2, r1	; 0x02
			
			if(keypad.keypad_value == 2)
 4d4:	88 81       	ld	r24, Y
 4d6:	99 81       	ldd	r25, Y+1	; 0x01
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	91 05       	cpc	r25, r1
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
 4de:	5d c0       	rjmp	.+186    	; 0x59a <__FUSE_REGION_LENGTH__+0x19a>
			{
				lcd_string_write("Counting RS:1 coins ");
 4e0:	84 ec       	ldi	r24, 0xC4	; 196
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				keypad.keypad_value = 0;
 4e8:	19 82       	std	Y+1, r1	; 0x01
 4ea:	18 82       	st	Y, r1
				keypad.keypad_counter = 0;				
 4ec:	1b 82       	std	Y+3, r1	; 0x03
 4ee:	1a 82       	std	Y+2, r1	; 0x02
				lcd_string_write("No of Coins:");
 4f0:	89 ed       	ldi	r24, 0xD9	; 217
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				while(1){
				keypad_read();
 4f8:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_read>
				if(keypad.keypad_counter > 0)
 4fc:	2a 81       	ldd	r18, Y+2	; 0x02
 4fe:	3b 81       	ldd	r19, Y+3	; 0x03
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	cc f7       	brge	.-14     	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
				{
					lcd_number_write(keypad.keypad_value,10);
 506:	6a e0       	ldi	r22, 0x0A	; 10
 508:	88 81       	ld	r24, Y
 50a:	99 81       	ldd	r25, Y+1	; 0x01
 50c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_number_write>
					for(int i=0; i<keypad.keypad_value; i++)
 510:	88 81       	ld	r24, Y
 512:	99 81       	ldd	r25, Y+1	; 0x01
 514:	18 16       	cp	r1, r24
 516:	19 06       	cpc	r1, r25
 518:	ec f4       	brge	.+58     	; 0x554 <__FUSE_REGION_LENGTH__+0x154>
 51a:	2b 2d       	mov	r18, r11
 51c:	3c 2d       	mov	r19, r12
					{
						PORTB=0x01;
 51e:	18 bb       	out	0x18, r17	; 24
 520:	8f e9       	ldi	r24, 0x9F	; 159
 522:	96 e8       	ldi	r25, 0x86	; 134
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	81 50       	subi	r24, 0x01	; 1
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	40 40       	sbci	r20, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <__FUSE_REGION_LENGTH__+0x126>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <__FUSE_REGION_LENGTH__+0x130>
 530:	00 00       	nop
						_delay_ms(500);
						PORTB=0x00;
 532:	18 ba       	out	0x18, r1	; 24
 534:	8f e9       	ldi	r24, 0x9F	; 159
 536:	96 e8       	ldi	r25, 0x86	; 134
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	81 50       	subi	r24, 0x01	; 1
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	40 40       	sbci	r20, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <__FUSE_REGION_LENGTH__+0x13a>
 542:	00 c0       	rjmp	.+0      	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
 544:	00 00       	nop
				while(1){
				keypad_read();
				if(keypad.keypad_counter > 0)
				{
					lcd_number_write(keypad.keypad_value,10);
					for(int i=0; i<keypad.keypad_value; i++)
 546:	2f 5f       	subi	r18, 0xFF	; 255
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	48 81       	ld	r20, Y
 54c:	59 81       	ldd	r21, Y+1	; 0x01
 54e:	24 17       	cp	r18, r20
 550:	35 07       	cpc	r19, r21
 552:	2c f3       	brlt	.-54     	; 0x51e <__FUSE_REGION_LENGTH__+0x11e>
						PORTB=0x01;
						_delay_ms(500);
						PORTB=0x00;
						_delay_ms(500);
					}	
					lcd_command_write(0x01);
 554:	8d 2d       	mov	r24, r13
 556:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
					lcd_string_write("Stopped counting");
 55a:	86 ee       	ldi	r24, 0xE6	; 230
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 562:	8f e9       	ldi	r24, 0x9F	; 159
 564:	96 e8       	ldi	r25, 0x86	; 134
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	81 50       	subi	r24, 0x01	; 1
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	20 40       	sbci	r18, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
 570:	00 c0       	rjmp	.+0      	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
 572:	00 00       	nop
 574:	3f e9       	ldi	r19, 0x9F	; 159
 576:	46 e8       	ldi	r20, 0x86	; 134
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	31 50       	subi	r19, 0x01	; 1
 57c:	40 40       	sbci	r20, 0x00	; 0
 57e:	80 40       	sbci	r24, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
 582:	00 c0       	rjmp	.+0      	; 0x584 <__FUSE_REGION_LENGTH__+0x184>
 584:	00 00       	nop
					_delay_ms(500);
					_delay_ms(500);
					lcd_command_write(0x01);
 586:	8d 2d       	mov	r24, r13
 588:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
					lcd_string_write("Press 2,4,6,8,5");
 58c:	8d e9       	ldi	r24, 0x9D	; 157
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
					keypad.keypad_value = 0;			
 594:	19 82       	std	Y+1, r1	; 0x01
 596:	18 82       	st	Y, r1
 598:	c0 c0       	rjmp	.+384    	; 0x71a <__FUSE_REGION_LENGTH__+0x31a>
					break;
				}
				}
			}
			
			if(keypad.keypad_value == 4)
 59a:	04 97       	sbiw	r24, 0x04	; 4
 59c:	09 f0       	breq	.+2      	; 0x5a0 <__FUSE_REGION_LENGTH__+0x1a0>
 59e:	5c c0       	rjmp	.+184    	; 0x658 <__FUSE_REGION_LENGTH__+0x258>
			{
				lcd_string_write("Counting RS:2 coins ");
 5a0:	87 ef       	ldi	r24, 0xF7	; 247
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				keypad.keypad_value = 0;
 5a8:	19 82       	std	Y+1, r1	; 0x01
 5aa:	18 82       	st	Y, r1
				keypad.keypad_counter = 0;
 5ac:	1b 82       	std	Y+3, r1	; 0x03
 5ae:	1a 82       	std	Y+2, r1	; 0x02
				lcd_string_write("No of Coins:");
 5b0:	89 ed       	ldi	r24, 0xD9	; 217
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				while(1){
					keypad_read();
 5b8:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_read>
					if(keypad.keypad_counter > 0)
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	9b 81       	ldd	r25, Y+3	; 0x03
 5c0:	18 16       	cp	r1, r24
 5c2:	19 06       	cpc	r1, r25
 5c4:	cc f7       	brge	.-14     	; 0x5b8 <__FUSE_REGION_LENGTH__+0x1b8>
					{
						lcd_number_write(keypad.keypad_value,10);
 5c6:	6a e0       	ldi	r22, 0x0A	; 10
 5c8:	88 81       	ld	r24, Y
 5ca:	99 81       	ldd	r25, Y+1	; 0x01
 5cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_number_write>
						for(int i=0; i<keypad.keypad_value; i++)
 5d0:	88 81       	ld	r24, Y
 5d2:	99 81       	ldd	r25, Y+1	; 0x01
 5d4:	18 16       	cp	r1, r24
 5d6:	19 06       	cpc	r1, r25
 5d8:	e4 f4       	brge	.+56     	; 0x612 <__FUSE_REGION_LENGTH__+0x212>
 5da:	8b 2d       	mov	r24, r11
 5dc:	9c 2d       	mov	r25, r12
						{
							PORTB=0x02;
 5de:	08 bb       	out	0x18, r16	; 24
 5e0:	2f e9       	ldi	r18, 0x9F	; 159
 5e2:	36 e8       	ldi	r19, 0x86	; 134
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	21 50       	subi	r18, 0x01	; 1
 5e8:	30 40       	sbci	r19, 0x00	; 0
 5ea:	40 40       	sbci	r20, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <__FUSE_REGION_LENGTH__+0x1e6>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
 5f0:	00 00       	nop
							_delay_ms(500);
							PORTB=0x00;
 5f2:	18 ba       	out	0x18, r1	; 24
 5f4:	2f e9       	ldi	r18, 0x9F	; 159
 5f6:	36 e8       	ldi	r19, 0x86	; 134
 5f8:	41 e0       	ldi	r20, 0x01	; 1
 5fa:	21 50       	subi	r18, 0x01	; 1
 5fc:	30 40       	sbci	r19, 0x00	; 0
 5fe:	40 40       	sbci	r20, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <__FUSE_REGION_LENGTH__+0x1fa>
 602:	00 c0       	rjmp	.+0      	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
 604:	00 00       	nop
				while(1){
					keypad_read();
					if(keypad.keypad_counter > 0)
					{
						lcd_number_write(keypad.keypad_value,10);
						for(int i=0; i<keypad.keypad_value; i++)
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	28 81       	ld	r18, Y
 60a:	39 81       	ldd	r19, Y+1	; 0x01
 60c:	82 17       	cp	r24, r18
 60e:	93 07       	cpc	r25, r19
 610:	34 f3       	brlt	.-52     	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
							PORTB=0x02;
							_delay_ms(500);
							PORTB=0x00;
							_delay_ms(500);
						}
						lcd_command_write(0x01);
 612:	8d 2d       	mov	r24, r13
 614:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
						lcd_string_write("Stopped counting");
 618:	86 ee       	ldi	r24, 0xE6	; 230
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 620:	8f e9       	ldi	r24, 0x9F	; 159
 622:	96 e8       	ldi	r25, 0x86	; 134
 624:	21 e0       	ldi	r18, 0x01	; 1
 626:	81 50       	subi	r24, 0x01	; 1
 628:	90 40       	sbci	r25, 0x00	; 0
 62a:	20 40       	sbci	r18, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <__FUSE_REGION_LENGTH__+0x230>
 630:	00 00       	nop
 632:	3f e9       	ldi	r19, 0x9F	; 159
 634:	46 e8       	ldi	r20, 0x86	; 134
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	31 50       	subi	r19, 0x01	; 1
 63a:	40 40       	sbci	r20, 0x00	; 0
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <__FUSE_REGION_LENGTH__+0x238>
 640:	00 c0       	rjmp	.+0      	; 0x642 <__FUSE_REGION_LENGTH__+0x242>
 642:	00 00       	nop
						_delay_ms(500);
						_delay_ms(500);
						lcd_command_write(0x01);
 644:	8d 2d       	mov	r24, r13
 646:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
						lcd_string_write("Press 2,4,6,8,5");
 64a:	8d e9       	ldi	r24, 0x9D	; 157
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
						keypad.keypad_value = 0;
 652:	19 82       	std	Y+1, r1	; 0x01
 654:	18 82       	st	Y, r1
 656:	c2 c0       	rjmp	.+388    	; 0x7dc <__FUSE_REGION_LENGTH__+0x3dc>
						break;
					}
				}
			}
			
			if(keypad.keypad_value == 6)
 658:	88 81       	ld	r24, Y
 65a:	99 81       	ldd	r25, Y+1	; 0x01
 65c:	06 97       	sbiw	r24, 0x06	; 6
 65e:	09 f0       	breq	.+2      	; 0x662 <__FUSE_REGION_LENGTH__+0x262>
 660:	5c c0       	rjmp	.+184    	; 0x71a <__FUSE_REGION_LENGTH__+0x31a>
			{
				lcd_string_write("Counting RS:5 coins ");
 662:	8c e0       	ldi	r24, 0x0C	; 12
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				keypad.keypad_value = 0;
 66a:	19 82       	std	Y+1, r1	; 0x01
 66c:	18 82       	st	Y, r1
				keypad.keypad_counter = 0;
 66e:	1b 82       	std	Y+3, r1	; 0x03
 670:	1a 82       	std	Y+2, r1	; 0x02
				lcd_string_write("No of Coins:");
 672:	89 ed       	ldi	r24, 0xD9	; 217
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				while(1){
					keypad_read();
 67a:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_read>
					if(keypad.keypad_counter > 0)
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	9b 81       	ldd	r25, Y+3	; 0x03
 682:	18 16       	cp	r1, r24
 684:	19 06       	cpc	r1, r25
 686:	cc f7       	brge	.-14     	; 0x67a <__FUSE_REGION_LENGTH__+0x27a>
					{
						lcd_number_write(keypad.keypad_value,10);
 688:	6a e0       	ldi	r22, 0x0A	; 10
 68a:	88 81       	ld	r24, Y
 68c:	99 81       	ldd	r25, Y+1	; 0x01
 68e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_number_write>
						for(int i=0; i<keypad.keypad_value; i++)
 692:	88 81       	ld	r24, Y
 694:	99 81       	ldd	r25, Y+1	; 0x01
 696:	18 16       	cp	r1, r24
 698:	19 06       	cpc	r1, r25
 69a:	e4 f4       	brge	.+56     	; 0x6d4 <__FUSE_REGION_LENGTH__+0x2d4>
 69c:	8b 2d       	mov	r24, r11
 69e:	9c 2d       	mov	r25, r12
						{
							PORTB=0x04;
 6a0:	f8 ba       	out	0x18, r15	; 24
 6a2:	2f e9       	ldi	r18, 0x9F	; 159
 6a4:	36 e8       	ldi	r19, 0x86	; 134
 6a6:	41 e0       	ldi	r20, 0x01	; 1
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	30 40       	sbci	r19, 0x00	; 0
 6ac:	40 40       	sbci	r20, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <__FUSE_REGION_LENGTH__+0x2a8>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <__FUSE_REGION_LENGTH__+0x2b2>
 6b2:	00 00       	nop
							_delay_ms(500);
							PORTB=0x00;
 6b4:	18 ba       	out	0x18, r1	; 24
 6b6:	2f e9       	ldi	r18, 0x9F	; 159
 6b8:	36 e8       	ldi	r19, 0x86	; 134
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	21 50       	subi	r18, 0x01	; 1
 6be:	30 40       	sbci	r19, 0x00	; 0
 6c0:	40 40       	sbci	r20, 0x00	; 0
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <__FUSE_REGION_LENGTH__+0x2bc>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <__FUSE_REGION_LENGTH__+0x2c6>
 6c6:	00 00       	nop
				while(1){
					keypad_read();
					if(keypad.keypad_counter > 0)
					{
						lcd_number_write(keypad.keypad_value,10);
						for(int i=0; i<keypad.keypad_value; i++)
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	28 81       	ld	r18, Y
 6cc:	39 81       	ldd	r19, Y+1	; 0x01
 6ce:	82 17       	cp	r24, r18
 6d0:	93 07       	cpc	r25, r19
 6d2:	34 f3       	brlt	.-52     	; 0x6a0 <__FUSE_REGION_LENGTH__+0x2a0>
							PORTB=0x04;
							_delay_ms(500);
							PORTB=0x00;
							_delay_ms(500);
						}
						lcd_command_write(0x01);
 6d4:	8d 2d       	mov	r24, r13
 6d6:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
						lcd_string_write("Stopped counting");
 6da:	86 ee       	ldi	r24, 0xE6	; 230
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 6e2:	8f e9       	ldi	r24, 0x9F	; 159
 6e4:	96 e8       	ldi	r25, 0x86	; 134
 6e6:	21 e0       	ldi	r18, 0x01	; 1
 6e8:	81 50       	subi	r24, 0x01	; 1
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	20 40       	sbci	r18, 0x00	; 0
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <__FUSE_REGION_LENGTH__+0x2e8>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <__FUSE_REGION_LENGTH__+0x2f2>
 6f2:	00 00       	nop
 6f4:	3f e9       	ldi	r19, 0x9F	; 159
 6f6:	46 e8       	ldi	r20, 0x86	; 134
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	31 50       	subi	r19, 0x01	; 1
 6fc:	40 40       	sbci	r20, 0x00	; 0
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <__FUSE_REGION_LENGTH__+0x2fa>
 702:	00 c0       	rjmp	.+0      	; 0x704 <__FUSE_REGION_LENGTH__+0x304>
 704:	00 00       	nop
						_delay_ms(500);
						_delay_ms(500);
						lcd_command_write(0x01);
 706:	8d 2d       	mov	r24, r13
 708:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
						lcd_string_write("Press 2,4,6,8,5");
 70c:	8d e9       	ldi	r24, 0x9D	; 157
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
						keypad.keypad_value = 0;
 714:	19 82       	std	Y+1, r1	; 0x01
 716:	18 82       	st	Y, r1
 718:	d1 ce       	rjmp	.-606    	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
						break;
					}
				}
			}
			
			if(keypad.keypad_value == 8)
 71a:	88 81       	ld	r24, Y
 71c:	99 81       	ldd	r25, Y+1	; 0x01
 71e:	08 97       	sbiw	r24, 0x08	; 8
 720:	09 f0       	breq	.+2      	; 0x724 <__FUSE_REGION_LENGTH__+0x324>
 722:	5c c0       	rjmp	.+184    	; 0x7dc <__FUSE_REGION_LENGTH__+0x3dc>
			{
				lcd_string_write("Counting RS:10 coins");
 724:	81 e2       	ldi	r24, 0x21	; 33
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				keypad.keypad_value = 0;
 72c:	19 82       	std	Y+1, r1	; 0x01
 72e:	18 82       	st	Y, r1
				keypad.keypad_counter = 0;
 730:	1b 82       	std	Y+3, r1	; 0x03
 732:	1a 82       	std	Y+2, r1	; 0x02
				lcd_string_write("No of Coins:");
 734:	89 ed       	ldi	r24, 0xD9	; 217
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
				while(1){
					keypad_read();
 73c:	0e 94 9a 00 	call	0x134	; 0x134 <keypad_read>
					if(keypad.keypad_counter > 0)
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	9b 81       	ldd	r25, Y+3	; 0x03
 744:	18 16       	cp	r1, r24
 746:	19 06       	cpc	r1, r25
 748:	cc f7       	brge	.-14     	; 0x73c <__FUSE_REGION_LENGTH__+0x33c>
					{
						lcd_number_write(keypad.keypad_value,10);
 74a:	6a e0       	ldi	r22, 0x0A	; 10
 74c:	88 81       	ld	r24, Y
 74e:	99 81       	ldd	r25, Y+1	; 0x01
 750:	0e 94 88 00 	call	0x110	; 0x110 <lcd_number_write>
						for(int i=0; i<keypad.keypad_value; i++)
 754:	88 81       	ld	r24, Y
 756:	99 81       	ldd	r25, Y+1	; 0x01
 758:	18 16       	cp	r1, r24
 75a:	19 06       	cpc	r1, r25
 75c:	e4 f4       	brge	.+56     	; 0x796 <__FUSE_REGION_LENGTH__+0x396>
 75e:	8b 2d       	mov	r24, r11
 760:	9c 2d       	mov	r25, r12
						{
							PORTB=0x08;
 762:	e8 ba       	out	0x18, r14	; 24
 764:	2f e9       	ldi	r18, 0x9F	; 159
 766:	36 e8       	ldi	r19, 0x86	; 134
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	21 50       	subi	r18, 0x01	; 1
 76c:	30 40       	sbci	r19, 0x00	; 0
 76e:	40 40       	sbci	r20, 0x00	; 0
 770:	e1 f7       	brne	.-8      	; 0x76a <__FUSE_REGION_LENGTH__+0x36a>
 772:	00 c0       	rjmp	.+0      	; 0x774 <__FUSE_REGION_LENGTH__+0x374>
 774:	00 00       	nop
							_delay_ms(500);
							PORTB=0x00;
 776:	18 ba       	out	0x18, r1	; 24
 778:	2f e9       	ldi	r18, 0x9F	; 159
 77a:	36 e8       	ldi	r19, 0x86	; 134
 77c:	41 e0       	ldi	r20, 0x01	; 1
 77e:	21 50       	subi	r18, 0x01	; 1
 780:	30 40       	sbci	r19, 0x00	; 0
 782:	40 40       	sbci	r20, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <__FUSE_REGION_LENGTH__+0x37e>
 786:	00 c0       	rjmp	.+0      	; 0x788 <__FUSE_REGION_LENGTH__+0x388>
 788:	00 00       	nop
				while(1){
					keypad_read();
					if(keypad.keypad_counter > 0)
					{
						lcd_number_write(keypad.keypad_value,10);
						for(int i=0; i<keypad.keypad_value; i++)
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	28 81       	ld	r18, Y
 78e:	39 81       	ldd	r19, Y+1	; 0x01
 790:	82 17       	cp	r24, r18
 792:	93 07       	cpc	r25, r19
 794:	34 f3       	brlt	.-52     	; 0x762 <__FUSE_REGION_LENGTH__+0x362>
							PORTB=0x08;
							_delay_ms(500);
							PORTB=0x00;
							_delay_ms(500);
						}
						lcd_command_write(0x01);
 796:	8d 2d       	mov	r24, r13
 798:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
						lcd_string_write("Stopped counting");
 79c:	86 ee       	ldi	r24, 0xE6	; 230
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 7a4:	8f e9       	ldi	r24, 0x9F	; 159
 7a6:	96 e8       	ldi	r25, 0x86	; 134
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	81 50       	subi	r24, 0x01	; 1
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	20 40       	sbci	r18, 0x00	; 0
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <__FUSE_REGION_LENGTH__+0x3aa>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <__FUSE_REGION_LENGTH__+0x3b4>
 7b4:	00 00       	nop
 7b6:	3f e9       	ldi	r19, 0x9F	; 159
 7b8:	46 e8       	ldi	r20, 0x86	; 134
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	31 50       	subi	r19, 0x01	; 1
 7be:	40 40       	sbci	r20, 0x00	; 0
 7c0:	80 40       	sbci	r24, 0x00	; 0
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <__FUSE_REGION_LENGTH__+0x3bc>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <__FUSE_REGION_LENGTH__+0x3c6>
 7c6:	00 00       	nop
						_delay_ms(500);
						_delay_ms(500);
						lcd_command_write(0x01);
 7c8:	8d 2d       	mov	r24, r13
 7ca:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_command_write>
						lcd_string_write("Press 2,4,6,8,5");
 7ce:	8d e9       	ldi	r24, 0x9D	; 157
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
						keypad.keypad_value = 0;
 7d6:	19 82       	std	Y+1, r1	; 0x01
 7d8:	18 82       	st	Y, r1
 7da:	70 ce       	rjmp	.-800    	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
						break;
					}
				}
			}
			
			if(keypad.keypad_value == 5)
 7dc:	88 81       	ld	r24, Y
 7de:	99 81       	ldd	r25, Y+1	; 0x01
 7e0:	05 97       	sbiw	r24, 0x05	; 5
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <__FUSE_REGION_LENGTH__+0x3e6>
 7e4:	6b ce       	rjmp	.-810    	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
			{
				lcd_string_write("Stopped counting   ");
 7e6:	86 e3       	ldi	r24, 0x36	; 54
 7e8:	91 e0       	ldi	r25, 0x01	; 1
 7ea:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_string_write>
 7ee:	66 ce       	rjmp	.-820    	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>

000007f0 <itoa>:
 7f0:	45 32       	cpi	r20, 0x25	; 37
 7f2:	51 05       	cpc	r21, r1
 7f4:	20 f4       	brcc	.+8      	; 0x7fe <itoa+0xe>
 7f6:	42 30       	cpi	r20, 0x02	; 2
 7f8:	10 f0       	brcs	.+4      	; 0x7fe <itoa+0xe>
 7fa:	0c 94 03 04 	jmp	0x806	; 0x806 <__itoa_ncheck>
 7fe:	fb 01       	movw	r30, r22
 800:	10 82       	st	Z, r1
 802:	cb 01       	movw	r24, r22
 804:	08 95       	ret

00000806 <__itoa_ncheck>:
 806:	bb 27       	eor	r27, r27
 808:	4a 30       	cpi	r20, 0x0A	; 10
 80a:	31 f4       	brne	.+12     	; 0x818 <__itoa_ncheck+0x12>
 80c:	99 23       	and	r25, r25
 80e:	22 f4       	brpl	.+8      	; 0x818 <__itoa_ncheck+0x12>
 810:	bd e2       	ldi	r27, 0x2D	; 45
 812:	90 95       	com	r25
 814:	81 95       	neg	r24
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__utoa_common>

0000081c <__utoa_ncheck>:
 81c:	bb 27       	eor	r27, r27

0000081e <__utoa_common>:
 81e:	fb 01       	movw	r30, r22
 820:	55 27       	eor	r21, r21
 822:	aa 27       	eor	r26, r26
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	aa 1f       	adc	r26, r26
 82a:	a4 17       	cp	r26, r20
 82c:	10 f0       	brcs	.+4      	; 0x832 <__utoa_common+0x14>
 82e:	a4 1b       	sub	r26, r20
 830:	83 95       	inc	r24
 832:	50 51       	subi	r21, 0x10	; 16
 834:	b9 f7       	brne	.-18     	; 0x824 <__utoa_common+0x6>
 836:	a0 5d       	subi	r26, 0xD0	; 208
 838:	aa 33       	cpi	r26, 0x3A	; 58
 83a:	08 f0       	brcs	.+2      	; 0x83e <__utoa_common+0x20>
 83c:	a9 5d       	subi	r26, 0xD9	; 217
 83e:	a1 93       	st	Z+, r26
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	79 f7       	brne	.-34     	; 0x822 <__utoa_common+0x4>
 844:	b1 11       	cpse	r27, r1
 846:	b1 93       	st	Z+, r27
 848:	11 92       	st	Z+, r1
 84a:	cb 01       	movw	r24, r22
 84c:	0c 94 28 04 	jmp	0x850	; 0x850 <strrev>

00000850 <strrev>:
 850:	dc 01       	movw	r26, r24
 852:	fc 01       	movw	r30, r24
 854:	67 2f       	mov	r22, r23
 856:	71 91       	ld	r23, Z+
 858:	77 23       	and	r23, r23
 85a:	e1 f7       	brne	.-8      	; 0x854 <strrev+0x4>
 85c:	32 97       	sbiw	r30, 0x02	; 2
 85e:	04 c0       	rjmp	.+8      	; 0x868 <__stack+0x9>
 860:	7c 91       	ld	r23, X
 862:	6d 93       	st	X+, r22
 864:	70 83       	st	Z, r23
 866:	62 91       	ld	r22, -Z
 868:	ae 17       	cp	r26, r30
 86a:	bf 07       	cpc	r27, r31
 86c:	c8 f3       	brcs	.-14     	; 0x860 <__stack+0x1>
 86e:	08 95       	ret

00000870 <_exit>:
 870:	f8 94       	cli

00000872 <__stop_program>:
 872:	ff cf       	rjmp	.-2      	; 0x872 <__stop_program>
